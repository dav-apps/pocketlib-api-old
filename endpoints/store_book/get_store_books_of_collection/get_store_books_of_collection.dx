(# Get the params)
(var uuid (get_param "uuid"))
(var fields_str (get_param "fields"))

(if (is_nil fields_str) (
	(var fields (list "books.uuid"))
) elseif (fields_str == "*") (
	(var fields (list "books.uuid" "books.title" "books.description" "books.language" "books.price" "books.isbn" "books.cover_aspect_ratio" "books.cover_blurhash"))
) else (
	(# Process the fields string)
	(var fields (func process_fields (fields_str)))
))

(# Get the access token)
(var access_token (get_header "Authorization"))
(var is_admin false)

(if (!(is_nil access_token)) (
	(# func render_validation_errors ((list
		(func validate_auth_header_presence (access_token))
	)))

	(# Get the session)
	(var session (func get_session (access_token)))

	(# Check if the user is an admin)
	(var admins (get_env "ADMINS"))
	(var is_admin (admins.contains session.user_id))
))

(# Get the collection)
(var collection (func get_table_object (uuid (get_env "STORE_BOOK_COLLECTION_TABLE_ID"))))

(if (is_nil collection) (
	(# Collection does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3506)) (status 404)))))
))

(# Get the author)
(var author (func get_table_object (collection.properties.author (get_env "AUTHOR_TABLE_ID"))))

(if (is_nil author) (
	(# Author does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
))

(# Check if the user can access not published books)
(var can_access (is_admin or ((! (is_nil session)) and (author.user_id == session.user_id))))

(# Get the store books of the collection)
(var books (list))

(for store_book_uuid in (collection.properties.books.split ",") (
	(var store_book (func get_table_object (store_book_uuid (get_env "STORE_BOOK_TABLE_ID"))))
	(if (is_nil store_book) (continue))
	(if ((! can_access) and (store_book.properties.status != "published")) (continue))

	(# Get the latest release)
	(var store_book_release (func get_last_release_of_store_book (store_book true)))

	(if (
		(is_nil store_book_release)
		or (
			(! can_access)
			and (store_book_release.properties.status != "published")
		)
	) (continue))

	(# Get the cover item)
	(var cover_item (func get_table_object (store_book_release.cover_item (get_env "STORE_BOOK_COVER_ITEM_TABLE_ID"))))
	(if ((is_nil cover_item) and (! can_access)) (continue))

	(# Add the book to the list)
	(var book_hash (hash))

	(if (fields.contains "books.uuid") (var book_hash.uuid store_book.uuid))
	(if (fields.contains "books.title") (var book_hash.title store_book_release.properties.title))
	(if (fields.contains "books.description") (var book_hash.description store_book_release.properties.description))
	(if (fields.contains "books.language") (var book_hash.language store_book.properties.language))
	(if (fields.contains "books.price") (var book_hash.price (to_int store_book.properties.price)))
	(if (fields.contains "books.isbn") (var book_hash.isbn store_book.properties.isbn))
	(if (fields.contains "books.cover_aspect_ratio") (var book_hash.cover_aspect_ratio (if (is_nil cover_item) nil else cover_item.properties.aspect_ratio)))
	(if (fields.contains "books.cover_blurhash") (var book_hash.cover_blurhash (if (is_nil cover_item) nil else cover_item.properties.blurhash)))

	(books.push book_hash)
))

(# Render the result)
(render_json (hash (books books)) 200)