(var json (parse_json (get_body)))

(var title json.title)
(var description json.description)
(var language json.language)
(var price json.price)
(var isbn json.isbn)
(var published json.published)
(var status json.status)
(var categories json.categories)

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header "Content-Type")))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))

(# Get the store book)
(var store_book (func get_table_object (uuid (get_env "STORE_BOOK_TABLE_ID"))))

(if (is_nil store_book) (
	(# Render Resource does not exist: StoreBook)
	(func render_validation_errors ((list (hash (error (get_error 3508)) (status 404)))))
))

(# Get the collection of the store book)
(var collection (func get_table_object (store_book.properties.collection (get_env "STORE_BOOK_COLLECTION_TABLE_ID"))))

(if (is_nil collection) (
	(# Collection does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3506)) (status 404)))))
))

(# Get the author of the collection)
(var author (func get_table_object (collection.properties.author (get_env "AUTHOR_TABLE_ID"))))

(if (is_nil author) (
	(# Author does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
))

(# Check if the user is an admin or if the store book belongs to the author of the user)
(if ((! is_admin) and (session.user_id != author.user_id)) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Validate the property types)
(func render_validation_errors ((list
	(if (!(is_nil title)) (func validate_title_type (title)))
	(if (!(is_nil description)) (func validate_description_type (description)))
	(if (!(is_nil language)) (func validate_language_type (language)))
	(if (!(is_nil price)) (func validate_price_type (price)))
	(if (!(is_nil isbn)) (func validate_isbn_type (isbn)))
	(if (!(is_nil published)) (func validate_published_type (published)))
	(if ((!(is_nil status)) and is_admin) (func validate_status_type (status)))
	(if (!(is_nil categories)) (func validate_categories_type (categories)))
)))

(# Validate the property length)
(func render_validation_errors ((list
	(if (!(is_nil title)) (func validate_title_length (title)))
	(if (!(is_nil description)) (func validate_description_length (description)))
)))

(if (!(is_nil language)) (
	(# Validate the language)
	(func render_validation_errors ((list
		(func validate_language_supported (language))
	)))
))

(# Validate price and isbn)
(func render_validation_errors ((list
	(if (!(is_nil price)) (func validate_price_validity (price)))
	(if (!(is_nil isbn)) (func validate_isbn_validity (isbn)))
)))

(if ((!(is_nil status)) and is_admin) (
	(# Validate the status)
	(func render_validation_errors ((list
		(func validate_status_supported (status))
	)))
))

(# Don't update language, price or isbn if the StoreBook is already published)
(if ((store_book.properties.status == "published") or (store_book.properties.status == "hidden")) (
	(if (!(is_nil language)) (
		(func render_validation_errors ((list (hash (error (get_error 3400)) (status 422)))))
	))

	(if (!(is_nil price)) (
		(func render_validation_errors ((list (hash (error (get_error 3401)) (status 422)))))
	))

	(if (!(is_nil isbn)) (
		(func render_validation_errors ((list (hash (error (get_error 3402)) (status 422)))))
	))
))

(# Update the values)
(if (!(is_nil title)) (var store_book.properties.title title))
(if (!(is_nil description)) (var store_book.properties.description description))
(if (!(is_nil language)) (var store_book.properties.language language))
(if (!(is_nil price)) (
	(var store_book.properties.price price)

	(# Set the price of the table object)
	(func set_table_object_price (store_book.uuid price "eur"))
))
(if (!(is_nil isbn)) (var store_book.properties.isbn (if (isbn.length == 0) nil else isbn)))

(if ((!(is_nil status)) and is_admin) (
	(# Update the status)
	(var store_book.properties.status status)

	(if (status == "published") (
		(# Add the store book to the latest store books)
		(func add_store_book_to_latest_books_collection (store_book))
	))
) elseif (!(is_nil published)) (
	(var status store_book.properties.status)

	(if (published and ((is_nil status) or (status == "unpublished"))) (
		(# Check if the book can be published)
		(var errors (list))

		(if (is_nil store_book.properties.description) (
			(errors.push (hash (error (get_error 3300)) (status 422)))
		))

		(if (is_nil store_book.properties.cover) (
			(errors.push (hash (error (get_error 3301)) (status 422)))
		))

		(if (is_nil store_book.properties.file) (
			(errors.push (hash (error (get_error 3302)) (status 422)))
		))
		
		(if (errors.length > 0) (
			(func render_validation_errors (errors))
		))

		(# Change the status of the book to "review")
		(var store_book.properties.status "review")
	) elseif ((! published) and (status == "review")) (
		(var store_book.properties.status "unpublished")
	) elseif ((! published) and (status == "published")) (
		(var store_book.properties.status "hidden")
	) elseif (published and (status == "hidden")) (
		(var store_book.properties.status "published")
	))
))

(# Update the categories)
(if (!(is_nil categories)) (
	(var category_keys (list))

	(# Get the uuids of the categories)
	(var category_objects (func get_category_table_objects ()))
	(var category_uuids (list))

	(for key in categories (
		(# Check if the key is already in the category_keys list)
		(if (category_keys.contains key) (break))

		(# Find the category with the key)
		(for obj in category_objects (
			(if (obj.properties.key == key) (
				(category_uuids.push obj.uuid)
				(category_keys.push key)
				(break)
			))
		))
	))

	(var store_book.properties.categories (category_uuids.join ","))
) else (
	(# Get the categories)
	(var category_keys (func get_category_keys_by_string (store_book.properties.categories)))
))

(# Get the status)
(var status (if (is_nil store_book.properties.status) "unpublished" else store_book.properties.status))

(# Return the store book)
(render_json (hash 
	(uuid store_book.uuid)
	(collection store_book.properties.collection)
	(title store_book.properties.title)
	(description (if (is_nil store_book.properties.description) "" else store_book.properties.description))
	(language store_book.properties.language)
	(price (to_int store_book.properties.price))
	(isbn store_book.properties.isbn)
	(status status)
	(cover (!(is_nil store_book.properties.cover)))
	(cover_aspect_ratio store_book.properties.cover_aspect_ratio)
	(cover_blurhash store_book.properties.cover_blurhash)
	(file (!(is_nil store_book.properties.file)))
	(file_name store_book.properties.file_name)
	(categories category_keys)
	(in_library (func is_store_book_in_user_library (session.user_id store_book.uuid)))
	(purchased (func has_user_purchased_table_object (session.user_id store_book.id)))
) 200)