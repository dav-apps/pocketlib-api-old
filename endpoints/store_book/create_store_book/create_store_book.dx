(var json (parse_json (get_body)))

(var author json.author)
(var collection json.collection)
(var title json.title)
(var description json.description)
(var language json.language)
(var price json.price)
(var isbn json.isbn)
(var categories json.categories)

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header "Content-Type")))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var is_admin (env.ADMINS.contains session.user_id))

(# Validate missing fields)
(func render_validation_errors ((list
	(if (is_admin and (is_nil collection)) (func validate_author_presence (author)))
	(func validate_title_presence (title))
	(func validate_language_presence (language))
)))

(# Validate the property types)
(func render_validation_errors ((list
	(if (!(is_nil author)) (func validate_author_type (author)))
	(if (!(is_nil collection)) (func validate_collection_type (collection)))
	(func validate_title_type (title))
	(if (!(is_nil description)) (func validate_description_type (description)))
	(func validate_language_type (language))
	(if (!(is_nil price)) (func validate_price_type (price)))
	(if (!(is_nil isbn)) (func validate_isbn_type (isbn)))
	(if (!(is_nil categories)) (func validate_categories_type (categories)))
)))

(# Validate the property length)
(func render_validation_errors ((list
	(func validate_title_length (title))
	(if (!(is_nil description)) (func validate_description_length (description)))
)))

(# Validate the language)
(func render_validation_errors ((list
	(func validate_language_supported (language))
)))

(# Validate price and isbn)
(func render_validation_errors ((list
	(if (!(is_nil price)) (func validate_price_validity (price)))
	(if (!(is_nil isbn)) (func validate_isbn_validity (isbn)))
)))

(if (! is_admin) (
	(# Check if the user is an author)
	(var authors (func get_author_table_objects (session.user_id)))
	(if (authors.length == 0) (
		(# User is not an author)
		(func render_validation_errors ((list (hash (error (get_error 3000)) (status 400)))))
	))

	(var author_obj authors#0)
))

(if (is_nil collection) (
	(# Create a new collection)
	(if (is_admin) (
		(var author_obj (func get_table_object (author env.AUTHOR_TABLE_ID session.user_id)))

		(if (is_nil author_obj) (
			(# Author does not exist)
			(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
		))		
	))

	(# Create the collection name)
	(var collection_name_properties (hash
		(name title)
		(language language)
	))
	(var collection_name (func create_table_object (session.user_id env.STORE_BOOK_COLLECTION_NAME_TABLE_ID collection_name_properties)))

	(# Create the collection)
	(var collection_properties (hash 
		(author author_obj.uuid)
		(names collection_name.uuid)
	))
	(var collection_obj (func create_table_object (session.user_id env.STORE_BOOK_COLLECTION_TABLE_ID collection_properties)))

	(# Update the collections property of the author)
	(func add_collection_to_author (author_obj collection_obj.uuid))
) else (
	(# Get the collection)
	(var collection_obj (func get_table_object (collection env.STORE_BOOK_COLLECTION_TABLE_ID session.user_id)))

	(if (is_nil collection_obj) (
		(# Collection does not exist)
		(func render_validation_errors ((list (hash (error (get_error 3506)) (status 404)))))
	))

	(# Check if the collection already has a name for the given language)
	(var names (func get_collection_names_by_string_as_hash (collection_obj.properties.names false)))

	(if (is_nil names..language) (
		(# Create the name for the language)
		(var collection_name_properties (hash
			(name title)
			(language language)
		))
		(var collection_name (func create_table_object (session.user_id env.STORE_BOOK_COLLECTION_NAME_TABLE_ID collection_name_properties)))

		(# Update the names property of the collection)
		(func add_name_to_collection (collection_obj collection_name.uuid))
	))
))

(# Create the store book)
(var store_book_properties (hash
	(collection collection_obj.uuid)
	(title title)
	(language language)
))

(if (!(is_nil description)) (
	(var store_book_properties.description description)
))

(if (!(is_nil price)) (
	(var store_book_properties.price price)
))

(if (!(is_nil isbn)) (
	(var store_book_properties.isbn isbn)
))

(var category_keys (list))
(if (!(is_nil categories)) (
	(# Get the uuids of the categories)
	(var category_objects (func get_category_table_objects ()))
	(var category_uuids (list))

	(for key in categories (
		(# Check if the key is already in the category_keys list)
		(if (category_keys.contains key) (break))

		(# Find the category with the key)
		(for obj in category_objects (
			(if (obj.properties.key == key) (
				(category_uuids.push obj.uuid)
				(category_keys.push key)
				(break)
			))
		))
	))

	(var store_book_properties.categories (category_uuids.join ","))
))

(var store_book (func create_table_object (session.user_id env.STORE_BOOK_TABLE_ID store_book_properties)))

(# Set the price of the table object)
(func set_table_object_price (store_book.uuid (if (is_nil price) 0 else price) "eur"))

(# Update the collection with the book)
(func add_book_to_collection (collection_obj store_book.uuid))

(# Render the result)
(render_json (hash 
	(uuid store_book.uuid)
	(collection store_book.properties.collection)
	(title store_book.properties.title)
	(description (if (is_nil store_book.properties.description) "" else store_book.properties.description))
	(language store_book.properties.language)
	(price (to_int store_book.properties.price))
	(isbn store_book.properties.isbn)
	(status "unpublished")
	(cover false)
	(cover_aspect_ratio nil)
	(cover_blurhash nil)
	(file false)
	(file_name nil)
	(categories category_keys)
	(in_library false)
	(purchased false)
) 201)