(# Get the params)
(var keys (get_param "keys"))
(var fields_str (get_param "fields"))
(var languages (get_param "languages"))
(var limit (to_int (get_param "limit")))
(var page (to_int (get_param "page")))

(if (is_nil fields_str) (
	(var fields (list "books.uuid" "pages"))
) elseif (fields_str == "*") (
	(var fields (list "books.uuid" "books.title" "books.description" "books.language" "books.price" "books.isbn" "books.cover_aspect_ratio" "books.cover_blurhash" "pages"))
) else (
	(# Process the fields string)
	(var fields (func process_fields (fields_str)))
))

(var language_list (list))

(if (is_nil languages) (
	(language_list.push "en")
) else (
	(# Read the languages string and add the languages to the list)
	(for language in (languages.split ",") (
		(# Validate the languages)
		(func render_validation_errors ((list
			(func validate_language_supported (language))
		)))

		(language_list.push language)
	))
))

(if (limit <= 0) (
	(var limit 50)
))

(if (page <= 0) (
	(var page 1)
))

(var calculate_pages (!((page == 1) and (!(fields.contains "pages")))))
(var admins (get_env "ADMINS"))
(var books (list))
(var keys_list (keys.split ","))

(for key in keys_list (
	(var categories (TableObject.find_by_property admins#0 (get_env "CATEGORY_TABLE_ID") "key" key))
	(if (categories.length == 0) (
		(# Category does not exist)
		(func render_validation_errors ((list (hash (error (get_error 3511)) (status 404)))))
	))

	(var category categories#0)

	(# Find StoreBookReleases with the category)
	(var store_book_releases (TableObject.find_by_property "*" (get_env "STORE_BOOK_RELEASE_TABLE_ID") "categories" category.uuid false))

	(# Get the appropriate store books)
	(for store_book_release in store_book_releases (
		(# Check if the store book is already in the books array)
		(var is_in_books false)
		(for book in books (
			(if (book.uuid == store_book_release.properties.store_book) (
				(var is_in_books true)
				(break)
			))
		))

		(if is_in_books (continue))

		(# Get the store book)
		(var store_book (func get_table_object (store_book_release.properties.store_book (get_env "STORE_BOOK_TABLE_ID"))))
		(if (is_nil store_book) (continue))

		(# Check if the store book is published)
		(if (store_book.properties.status != "published") (continue))

		(# Check if the store book is written in one of the given languages)
		(if (!(language_list.contains store_book.properties.language)) (continue))

		(# Get the latest release)
		(var latest_store_book_release (func get_last_release_of_store_book (store_book true)))
		(if ((is_nil latest_store_book_release) or (latest_store_book_release.properties.status != "published")) (continue))

		(# Get the cover item)
		(var cover_item (func get_table_object (latest_store_book_release.cover_item (get_env "STORE_BOOK_COVER_ITEM_TABLE_ID"))))
		(if (is_nil cover_item) (continue))

		(# Get the categories)
		(var categories (func get_category_keys_by_string (latest_store_book_release.properties.categories)))

		(# Check if the store book belongs to all given categories)
		(if (!(categories.contains_all keys_list)) (continue))

		(# Add the book to the list)
		(var book_hash (hash))

		(if (fields.contains "books.uuid") (var book_hash.uuid store_book.uuid))
		(if (fields.contains "books.title") (var book_hash.title latest_store_book_release.properties.title))
		(if (fields.contains "books.description") (var book_hash.description latest_store_book_release.properties.description))
		(if (fields.contains "books.language") (var book_hash.language store_book.properties.language))
		(if (fields.contains "books.price") (var book_hash.price (if (is_nil store_book.properties.price) 0 else store_book.properties.price)))
		(if (fields.contains "books.isbn") (var book_hash.isbn store_book.properties.isbn))
		(if (fields.contains "books.cover_aspect_ratio") (var book_hash.cover_aspect_ratio cover_item.properties.aspect_ratio))
		(if (fields.contains "books.cover_blurhash") (var book_hash.cover_blurhash cover_item.properties.blurhash))

		(books.push book_hash)

		(if (! calculate_pages) (
			(# Check if the limit is reached)
			(if (books.length >= limit) (break))
		))
	))
))

(if calculate_pages (
	(# Calculate the available pages)
	(var pages 1)
	(if (books.length > 0) (
		(if ((books.length % limit) == 0) (
			(var pages (books.length / limit))
		) else (
			(var pages ((books.length / limit) + 1))
		))
	))

	(if (page > pages) (
		(var page pages)
	))

	(# Select the correct books)
	(var start (limit * (page - 1)))
	(var length (if (limit > books.length) books.length else limit))
	(var selected_books (books.select start length))
) else (
	(var selected_books books)
))

(# Render the result)
(var result (hash))

(if (
	(fields.contains "books.uuid")
	or (fields.contains "books.title")
	or (fields.contains "books.description")
	or (fields.contains "books.language")
	or (fields.contains "books.price")
	or (fields.contains "books.isbn")
	or (fields.contains "books.cover_aspect_ratio")
	or (fields.contains "books.cover_blurhash")
) (var result.books selected_books))
(if (fields.contains "pages") (var result.pages pages))

(render_json result 200)