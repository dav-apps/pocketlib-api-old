(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))
(if (! is_admin) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Get all store books in review)
(var book_objects (TableObject.find_by_property "*" (get_env "STORE_BOOK_TABLE_ID") "status" "review"))
(var books (list))

(for book_object in book_objects (
	(# Get the categories)
	(var categories (func get_category_keys_by_string (book_object.properties.categories)))

	(# Convert the table object to hash)
	(var book (hash
		(uuid book_object.uuid)
		(title book_object.properties.title)
		(description (if (is_nil book_object.properties.description) "" else book_object.properties.description))
		(language book_object.properties.language)
		(price (to_int book_object.properties.price))
		(isbn book_object.properties.isbn)
		(status book_object.properties.status)
		(cover (!(is_nil book_object.properties.cover)))
		(cover_aspect_ratio book_object.properties.cover_aspect_ratio)
		(cover_blurhash book_object.properties.cover_blurhash)
		(file (!(is_nil book_object.properties.file)))
		(file_name book_object.properties.file_name)
		(categories categories)
	))

	(books.push book)
))

(# Render the result)
(render_json (hash
	(books books)
) 200)