(# Get the params)
(var fields_str (get_param "fields"))
(var languages (get_param "languages"))
(var limit (to_int (get_param "limit")))
(var page (to_int (get_param "page")))
(var latest ((get_param "latest") == "true"))
(var author_uuid (get_param "author"))
(var collection_uuid (get_param "collection"))
(var series_uuid (get_param "series"))

(if (is_nil fields_str) (
	(var fields (list "type" "pages" "items.uuid"))
) elseif (fields_str == "*") (
	(var fields (list "type" "pages" "items.uuid" "items.title" "items.description" "items.language" "items.price" "items.isbn" "items.status" "items.cover" "items.file" "items.in_library" "items.purchased" "items.categories"))
) else (
	(# Process the fields string)
	(var fields (func process_fields (fields_str)))
))

(var language_list (func process_languages (languages)))

(if (limit <= 0) (
	(var limit 50)
))

(if (page <= 0) (
	(var page 1)
))

(# Get the access token)
(var access_token (get_header "Authorization"))

(var calculate_pages ((fields.contains "pages") or (page > 1)))
(var public true)
(var file_details false)
(var user_details false)

(if latest (
	(var store_book_uuids (func get_latest_store_book_table_object_uuids ()))
	(var store_book_uuids store_book_uuids.reverse)
) elseif (!(is_nil author_uuid)) (
	(# Get the author)
	(var author (func get_table_object (author_uuid (get_env "AUTHOR_TABLE_ID"))))

	(if (is_nil author) (
		(# Author does not exist)
		(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
	))

	(# Get the collections of the author)
	(var collection_table_objects (TableObject.find_by_property author.user_id (get_env "STORE_BOOK_COLLECTION_TABLE_ID") "author" author.uuid))

	(var store_book_uuids (list))

	(for store_book_collection in collection_table_objects (
		(if (is_nil store_book_collection.properties.books) (continue))

		(for uuid in (store_book_collection.properties.books.split ",") (
			(store_book_uuids.push uuid)
		))
	))
) elseif (!(is_nil collection_uuid)) (
	(if (!(is_nil access_token)) (
		(# func render_validation_errors ((list
			(func validate_auth_header_presence (access_token))
		)))

		(# Get the session)
		(var session (func get_session (access_token)))

		(# Check if the user is an admin)
		(var admins (get_env "ADMINS"))
		(var is_admin (admins.contains session.user_id))
	))

	(# Get the store book collection)
	(var collection (func get_table_object (collection_uuid (get_env "STORE_BOOK_COLLECTION_TABLE_ID"))))

	(if (is_nil collection) (
		(# Collection does not exist)
		(func render_validation_errors ((list (hash (error (get_error 3506)) (status 404)))))
	))

	(# Get the author)
	(var author (func get_table_object (collection.properties.author (get_env "AUTHOR_TABLE_ID"))))

	(if (is_nil author) (
		(# Author does not exist)
		(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
	))

	(# Check if the user can access not published books)
	(var can_access (is_admin or ((! (is_nil session)) and (author.user_id == session.user_id))))
	(var public (! can_access))
	(var file_details (is_admin or ((! (is_nil session)) and (author.user_id == session.user_id))))
	(var user_details (!(is_nil session)))
	(var store_book_uuids (list))

	(if (!(is_nil collection.properties.books)) (
		(for store_book_uuid in (collection.properties.books.split ",") (
			(store_book_uuids.push store_book_uuid)
		))
	))
) elseif (!(is_nil series_uuid)) (
	(# Get the store book series)
	(var series (func get_table_object (series_uuid (get_env "STORE_BOOK_SERIES_TABLE_ID"))))

	(if (is_nil series) (
		(# Series does not exist)
		(func render_validation_errors ((list (hash (error (get_error 3514)) (status 404)))))
	))

	(# Get the collections of the series)
	(var collection_uuids_string series.properties.collections)

	(if (is_nil collection_uuids_string) (
		(func render_validation_errors ((list (hash (error (get_error 3012)) (status 412)))))
	))

	(var collection_uuids (collection_uuids_string.split ","))

	(# Get the names of the series)
	(var names (func get_series_names_by_string_as_hash (series.properties.names)))

	(# Check each given language if the series has a name for it)
	(var series_languages (hash))

	(for lang in language_list (
		(if (!(is_nil names[lang])) (
			(var series_languages[lang] (list))
		))
	))

	(# Try to get the store book of each collection for each language)
	(for collection_uuid in collection_uuids (
		(# Get the store book collection)
		(var collection (func get_table_object (collection_uuid (get_env "STORE_BOOK_COLLECTION_TABLE_ID"))))
		(if (is_nil collection) (continue))
		(if (is_nil collection.properties.books) (continue))

		(for store_book_uuid in (collection.properties.books.split ",") (
			(# Get the store book)
			(var store_book (func get_table_object (store_book_uuid (get_env "STORE_BOOK_TABLE_ID"))))
			(if (is_nil store_book) (continue))

			(# Check the status)
			(if (store_book.properties.status != "published") (continue))

			(# Check the language)
			(if (!(language_list.contains store_book.properties.language)) (continue))

			(# Get the store book release)
			(var store_book_release (func get_last_release_of_store_book (store_book public)))
			(if (is_nil store_book_release) (continue))
			(if (store_book_release.properties.status != "published") (continue))

			(# Get the cover item)
			(var cover_item (func get_table_object (store_book_release.properties.cover_item (get_env "STORE_BOOK_COVER_ITEM_TABLE_ID"))))
			(if (is_nil cover_item) (continue))

			(# Add the store book to the list of store books for the language)
			(series_languages[store_book.properties.language].push store_book)
		))
	))

	(var selected_lang nil)

	(# Try to find a language for which there are all store books available)
	(for lang in series_languages.keys (
		(if (series_languages[lang].length == collection_uuids.length) (
			(var selected_lang lang)
			(break)
		))
	))

	(if (is_nil selected_lang) (
		(func render_validation_errors ((list (hash (error (get_error 3012)) (status 412)))))
	))

	(var store_book_uuids (list))

	(for store_book in series_languages[selected_lang] (
		(store_book_uuids.push store_book.uuid)
	))
) else (
	(var store_book_uuids (list))
))

(var store_books (list))

(for store_book_uuid in store_book_uuids (
	(# Get the book table object)
	(var store_book (func get_table_object (store_book_uuid (get_env "STORE_BOOK_TABLE_ID"))))
	(if (is_nil store_book) (continue))

	(# Get the status)
	(var status (if (is_nil store_book.properties.status) "unpublished" else store_book.properties.status))
	(if (public and (status != "published")) (continue))

	(# Check the language)
	(if (public and (!(language_list.contains store_book.properties.language))) (continue))

	(# Get the store book release)
	(var store_book_release (func get_last_release_of_store_book (store_book public)))
	(if (is_nil store_book_release) (continue))
	(if (public and (store_book_release.properties.status != "published")) (continue))

	(if (
		(fields.contains "items.cover")
		or (fields.contains "items.cover.url")
		or (fields.contains "items.cover.aspect_ratio")
		or (fields.contains "items.cover.blurhash")
		or public
	) (
		(# Get the cover item)
		(var cover_item (func get_table_object (store_book_release.properties.cover_item (get_env "STORE_BOOK_COVER_ITEM_TABLE_ID"))))
		(if (public and (is_nil cover_item)) (continue))
	))

	(if (fields.contains "categories") (
		(# Get the categories)
		(var categories (func get_category_keys_by_string (store_book_release.properties.categories)))
	))

	(# Add the book to the list)
	(var book_hash (hash))

	(if (fields.contains "items.uuid") (var book_hash.uuid store_book.uuid))
	(if (fields.contains "items.title") (var book_hash.title store_book_release.properties.title))
	(if (fields.contains "items.description") (var book_hash.description store_book_release.properties.description))
	(if (fields.contains "items.language") (var book_hash.language store_book.properties.language))
	(if (fields.contains "items.price") (var book_hash.price (to_int store_book_release.properties.price)))
	(if (fields.contains "items.isbn") (var book_hash.isbn store_book_release.properties.isbn))
	(if (fields.contains "items.status") (var book_hash.status status))

	(if (
		(fields.contains "items.cover")
		or (fields.contains "items.cover.url")
		or (fields.contains "items.cover.aspect_ratio")
		or (fields.contains "items.cover.blurhash")
	) (
		(if (is_nil cover_item) (
			(var book_hash.cover nil)
		) else (
			(var cover_hash (hash))

			(if ((fields.contains "items.cover") or (fields.contains "items.cover.url")) (var cover_hash.url (TableObject.get_cdn_url cover_item.properties.cover)))
			(if ((fields.contains "items.cover") or (fields.contains "items.cover.aspect_ratio")) (var cover_hash.aspect_ratio cover_item.properties.aspect_ratio))
			(if ((fields.contains "items.cover") or (fields.contains "items.cover.blurhash")) (var cover_hash.blurhash cover_item.properties.blurhash))

			(var book_hash.cover cover_hash)
		))
	))

	(if (
		((fields.contains "items.file") or (fields.contains "items.file.file_name"))
		and file_details
	) (
		(# Get the file item)
		(var file_item (func get_table_object (store_book_release.properties.file_item (get_env "STORE_BOOK_FILE_ITEM_TABLE_ID"))))

		(if (is_nil file_item) (
			(var book_hash.file nil)
		) else (
			(var book_hash.file (hash (file_name file_item.properties.file_name)))
		))
	))

	(if (
		(fields.contains "items.in_library")
		and user_details
	) (
		(var book_hash.in_library (func is_store_book_in_user_library (session.user_id store_book.uuid)))
	))
	
	(if (
		(fields.contains "items.purchased")
		and user_details
	) (
		(var book_hash.purchased (func has_user_purchased_table_object (session.user_id store_book.id)))
	))

	(if (fields.contains "items.categories") (var book_hash.categories (func get_category_keys_by_string (store_book_release.properties.categories))))

	(store_books.push book_hash)

	(if (! calculate_pages) (
		(# Check if the limit is reached)
		(if (store_books.length >= limit) (break))
	))
))

(if calculate_pages (
	(# Calculate the available pages)
	(var pages 1)
	(if (store_books.length > 0) (
		(if ((store_books.length % limit) == 0) (
			(var pages (store_books.length / limit))
		) else (
			(var pages ((store_books.length / limit) + 1))
		))
	))

	(if (page > pages) (
		(var page pages)
	))

	(# Select the correct books)
	(var start (limit * (page - 1)))
	(var length (if (limit > store_books.length) store_books.length else limit))
	(var selected_store_books (store_books.select start length))
) else (
	(var selected_store_books store_books)
))

(# Render the result)
(var result (hash))

(if (fields.contains "type") (var result.type "store_book"))
(if (fields.contains "pages") (var result.pages pages))
(var result.items selected_store_books)

(render_json result 200)