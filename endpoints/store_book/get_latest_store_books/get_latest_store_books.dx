(# Get the params)
(var languages (get_param "languages"))
(var limit (to_int (get_param "limit")))
(var page (to_int (get_param "page")))

(var language_list (list))

(if (is_nil languages) (
	(language_list.push "en")
) else (
	(# Read the languages string and add the languages to the list)
	(for language in (languages.split ",") (
		(# Validate the languages)
		(func render_validation_errors ((list
			(func validate_language_supported (language))
		)))

		(language_list.push language)
	))
))

(if (limit <= 0) (
	(var limit 50)
))

(if (page <= 0) (
	(var page 1)
))

(# Get the latest store books)
(var book_objects (func get_latest_store_book_table_objects ()))
(var book_objects book_objects.reverse)
(var books (list))

(for book_object in book_objects (
	(# Check if the store book is published)
	(if ((book_object.properties.status == "published") and (language_list.contains book_object.properties.language)) (
		(# Get the category keys)
		(var categories (func get_category_keys_by_string (book_object.properties.categories)))

		(# Convert the table object to hash)
		(var book (hash
			(uuid book_object.uuid)
			(title book_object.properties.title)
			(description (if (is_nil book_object.properties.description) "" else book_object.properties.description))
			(language book_object.properties.language)
			(price (if (is_nil book_object.properties.price) 0 else book_object.properties.price))
			(isbn book_object.properties.isbn)
			(status book_object.properties.status)
			(cover (!(is_nil book_object.properties.cover)))
			(cover_aspect_ratio book_object.properties.cover_aspect_ratio)
			(cover_blurhash book_object.properties.cover_blurhash)
			(file (!(is_nil book_object.properties.file)))
			(file_name book_object.properties.file_name)
			(categories categories)
		))

		(books.push book)
	))
))

(# Calculate the available pages)
(var pages 1)
(if (books.length > 0) (
	(if ((books.length % limit) == 0) (
		(var pages (books.length / limit))
	) else (
		(var pages ((books.length / limit) + 1))
	))
))

(if (page > pages) (
	(var page pages)
))

(# Select the correct books)
(var start (limit * (page - 1)))
(var length (if (limit > books.length) books.length else limit))
(var selected_books (books.select start length))

(# Render the result)
(render_json (hash
	(books selected_books)
	(pages pages)
) 200)