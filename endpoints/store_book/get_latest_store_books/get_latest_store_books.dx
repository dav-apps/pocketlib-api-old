(# Get the params)
(var fields_str (get_param "fields"))
(var languages (get_param "languages"))
(var limit (to_int (get_param "limit")))
(var page (to_int (get_param "page")))

(if (is_nil fields_str) (
	(var fields (list "books.uuid" "pages"))
) elseif (fields_str == "*") (
	(var fields (list "books.uuid" "books.title" "books.description" "books.language" "books.price" "books.isbn" "books.cover_aspect_ratio" "books.cover_blurhash" "pages"))
) else (
	(# Process the fields string)
	(var fields (func process_fields (fields_str)))
))

(var language_list (list))

(if (is_nil languages) (
	(language_list.push "en")
) else (
	(# Read the languages string and add the languages to the list)
	(for language in (languages.split ",") (
		(# Validate the languages)
		(func render_validation_errors ((list
			(func validate_language_supported (language))
		)))

		(language_list.push language)
	))
))

(if (limit <= 0) (
	(var limit 50)
))

(if (page <= 0) (
	(var page 1)
))

(var calculate_pages (!((page == 1) and (!(fields.contains "pages")))))

(# Get the latest store books)
(var book_uuids (func get_latest_store_book_table_object_uuids ()))
(var book_uuids book_uuids.reverse)
(var books (list))

(for book_uuid in book_uuids (
	(# Get the book table object)
	(var book (func get_table_object (book_uuid (get_env "STORE_BOOK_TABLE_ID"))))
	(if (is_nil book) (continue))

	(# Check if the store book is published)
	(if ((book.properties.status == "published") and (language_list.contains book.properties.language)) (
		(# Get the latest release)
		(var book_release (func get_last_release_of_store_book (book true)))
		(if ((is_nil book_release) or (book_release.properties.status != "published")) (continue))

		(# Get the cover item)
		(var cover_item (func get_table_object (book_release.cover_item (get_env "STORE_BOOK_COVER_ITEM_TABLE_ID"))))
		(if (is_nil cover_item) (continue))

		(# Add the book to the list)
		(var book_hash (hash))

		(if (fields.contains "books.uuid") (var book_hash.uuid book.uuid))
		(if (fields.contains "books.title") (var book_hash.title book_release.properties.title))
		(if (fields.contains "books.description") (var book_hash.description book_release.properties.description))
		(if (fields.contains "books.language") (var book_hash.language book.properties.language))
		(if (fields.contains "books.price") (var book_hash.price (to_int book.properties.price)))
		(if (fields.contains "books.isbn") (var book_hash.isbn book.properties.isbn))
		(if (fields.contains "books.cover_aspect_ratio") (var book_hash.cover_aspect_ratio cover_item.properties.aspect_ratio))
		(if (fields.contains "books.cover_blurhash") (var book_hash.cover_blurhash cover_item.properties.blurhash))

		(books.push book_hash)

		(if (! calculate_pages) (
			(# Check if the limit is reached)
			(if (books.length >= limit) (break))
		))
	))
))

(if calculate_pages (
	(# Calculate the available pages)
	(var pages 1)
	(if (books.length > 0) (
		(if ((books.length % limit) == 0) (
			(var pages (books.length / limit))
		) else (
			(var pages ((books.length / limit) + 1))
		))
	))

	(if (page > pages) (
		(var page pages)
	))

	(# Select the correct books)
	(var start (limit * (page - 1)))
	(var length (if (limit > books.length) books.length else limit))
	(var selected_books (books.select start length))
) else (
	(var selected_books books)
))

(# Render the result)
(var result (hash))

(if (
	(fields.contains "books.uuid")
	or (fields.contains "books.title")
	or (fields.contains "books.description")
	or (fields.contains "books.language")
	or (fields.contains "books.price")
	or (fields.contains "books.isbn")
	or (fields.contains "books.cover_aspect_ratio")
	or (fields.contains "books.cover_blurhash")
) (var result.books selected_books))
(if (fields.contains "pages") (var result.pages pages))

(render_json result 200)