(var data (get_body))

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Check if content type is supported)
(var content_type (get_header "Content-Type"))
(func render_validation_errors ((list
	(func validate_content_type_image (content_type))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Get the store book)
(var store_book (func get_table_object (uuid env.STORE_BOOK_TABLE_ID)))

(if (is_nil store_book) (
	(# StoreBook does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3508)) (status 404)))))
))

(# Get the collection of the store book)
(var collection (func get_table_object (store_book.properties.collection env.STORE_BOOK_COLLECTION_TABLE_ID)))

(if (is_nil collection) (
	(# Collection does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3506)) (status 404)))))
))

(# Get the author of the collection)
(var author (func get_table_object (collection.properties.author env.AUTHOR_TABLE_ID)))

(if (is_nil author) (
	(# Resource does not exist: Author)
	(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
))

(# Check if the store book belongs to the author of the user)
(if (session.user_id != author.user_id) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Define functions for creating and updating the cover table object)
(def update_cover_properties () (
	(# Update the store book with the blurhash)
	(var store_book.properties.cover_blurhash (Blurhash.encode data))

	(# Get the width and height of the cover)
	(var details (Image.get_details data))
	(var aspect_ratio nil)

	(if (details.width != -1) (
		(# Calculate the aspect ratio in the form width:height)
		(var aspect_ratio "1:1")
		(if (details.width < details.height) (
			(var value (details.height.to_f / details.width.to_f))
			(var aspect_ratio ("1:" + (Math.round value 5)))
		) elseif (details.width > details.height) (
			(var value (details.width.to_f / details.height.to_f))
			(var aspect_ratio ((Math.round value 5) + ":1"))
		))
	))

	(# Update the store book with the aspect ratio)
	(var store_book.properties.cover_aspect_ratio aspect_ratio)
))

(def create_cover () (
	(# Create the cover table object)
	(var cover (func create_store_book_cover_table_object (session.user_id content_type data)))

	(# Update the store book with the uuid of the cover table object)
	(var store_book.properties.cover cover.uuid)

	(func update_cover_properties ())
))

(def update_cover () (
	(# Update the file of the cover table object)
	(func update_store_book_cover_table_object (cover.uuid content_type data))

	(func update_cover_properties ())
))

(# Get the cover table object of the store book)
(var cover_uuid store_book.properties.cover)

(if (is_nil cover_uuid) (
	(# Create the cover)
	(func create_cover ())
) else (
	(# Try to get the cover table object)
	(var cover (func get_table_object (cover_uuid env.STORE_BOOK_COVER_TABLE_ID)))

	(if (is_nil cover) (
		(# Create the cover)
		(func create_cover ())
	) else (
		(# Update the cover)
		(func update_cover ())
	))
))

(render_json (hash) 200)