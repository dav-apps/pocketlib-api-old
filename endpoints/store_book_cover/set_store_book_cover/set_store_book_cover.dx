(# Get the params)
(var uuid (get_param "uuid"))

(var data (get_body))

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Check if content type is supported)
(var content_type (get_header "Content-Type"))
(func render_validation_errors ((list
	(func validate_content_type_image (content_type))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Get the store book)
(var store_book (func get_table_object (uuid (get_env "STORE_BOOK_TABLE_ID"))))

(if (is_nil store_book) (
	(# StoreBook does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3508)) (status 404)))))
))

(# Get the latest store book release)
(if (is_nil store_book.properties.releases) (
	(# StoreBookRelease does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3516)) (status 404)))))
))

(var releases (store_book.properties.releases.split ","))
(var releases releases.reverse)
(var latest_release (func get_table_object ((releases.pop) (get_env "STORE_BOOK_RELEASE_TABLE_ID"))))

(if (is_nil latest_release) (
	(# StoreBookRelease does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3516)) (status 404)))))
))

(# Get the collection of the store book)
(var collection (func get_table_object (store_book.properties.collection (get_env "STORE_BOOK_COLLECTION_TABLE_ID"))))

(if (is_nil collection) (
	(# Collection does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3506)) (status 404)))))
))

(# Get the author of the collection)
(var author (func get_table_object (collection.properties.author (get_env "AUTHOR_TABLE_ID"))))

(if (is_nil author) (
	(# Resource does not exist: Author)
	(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
))

(# Check if the store book belongs to the author of the user)
(if (session.user_id != author.user_id) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Define functions for creating and updating the cover table object)
(def update_cover_item_properties (cover_item data) (
	(# Update the store book with the blurhash)
	(var cover_item.properties.blurhash (Blurhash.encode data))

	(# Get the width and height of the cover)
	(var details (Image.get_details data))
	(var aspect_ratio nil)

	(if (details.width != -1) (
		(# Calculate the aspect ratio in the form width:height)
		(var aspect_ratio "1:1")
		(if (details.width < details.height) (
			(var value (Math.round (details.height.to_f / details.width.to_f) 5))
			(var aspect_ratio ("1:" + value.to_s))
		) elseif (details.width > details.height) (
			(var value (Math.round (details.width.to_f / details.height.to_f) 5))
			(var aspect_ratio (value.to_s + ":1"))
		))
	))

	(# Update the store book with the aspect ratio)
	(var cover_item.properties.aspect_ratio aspect_ratio)
))

(def create_cover (store_book_release session content_type data) (
	(# Create the cover table object)
	(var cover (func create_store_book_cover_table_object (session.user_id content_type data)))

	(# Create the cover item table object)
	(var cover_item (func create_table_object (
		store_book_release.user_id
		(get_env "STORE_BOOK_COVER_ITEM_TABLE_ID")
		(hash
			(cover cover.uuid)
		)
	)))

	(# Set the properties of the cover item)
	(func update_cover_item_properties (cover_item data))

	(return cover_item)
))

(def update_cover (cover_item content_type data) (
	(# Update the file of the cover table object)
	(func update_store_book_cover_table_object (cover_item.properties.cover content_type data))

	(func update_cover_item_properties (cover_item data))
))

(if (latest_release.status == "published") (
	(# Create a new release)
	(var new_release (func create_table_object (
		store_book.user_id
		(get_env "STORE_BOOK_RELEASE_TABLE_ID")
		(hash
			(store_book store_book.uuid)
			(title latest_release.properties.title)
			(description latest_release.properties.description)
			(file_item latest_release.properties.file_item)
			(categories latest_release.properties.categories)
		)
	)))

	(# Add the new release to the releases of the store book)
	(func add_release_to_store_book (store_book new_release.uuid))

	(# Create the new cover and cover item)
	(var cover_item (func create_cover (new_release session content_type data)))
	(var new_release.properties.cover_item cover_item.uuid)
) else (
	(var release_uuid (releases.pop))
	(var release nil)
	(var update_cover true)

	(if (!(is_nil release_uuid)) (
		(var release (func get_table_object (release_uuid (get_env "STORE_BOOK_RELEASE_TABLE_ID"))))

		(if (!(is_nil release)) (
			(# Check if the release is published and uses the cover item of the latest release)
			(if (
				(release.properties.status == "published")
				and (release.properties.cover_item == latest_release.properties.cover_item)
			) (
				(var update_cover false)
			))
		))
	))

	(if update_cover (
		(# Update the cover of the latest release)
		(var cover_item (func get_table_object (latest_release.properties.cover_item (get_env "STORE_BOOK_COVER_ITEM_TABLE_ID"))))

		(if (is_nil cover_item) (
			(var cover_item (func create_cover (latest_release session content_type data)))
			(var latest_release.properties.cover_item cover_item.uuid)
		) else (
			(func update_cover (cover_item content_type data))
		))
	) else (
		(# Create a new cover and cover item)
		(var cover_item (func create_cover (latest_release session content_type data)))
		(var latest_release.properties.cover_item cover_item.uuid)
	))
))

(render_json (hash) 204)