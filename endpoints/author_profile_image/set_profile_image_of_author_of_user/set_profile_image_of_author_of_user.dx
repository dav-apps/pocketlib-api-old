(var data (get_body))

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Check if content type is supported)
(var content_type (get_header "Content-Type"))
(func render_validation_errors ((list
	(func validate_content_type_image (content_type))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))

(if is_admin (
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Get the author of the user)
(var authors (func get_author_table_objects (session.user_id)))

(if (authors.length == 0) (
	(func render_validation_errors ((list (hash (error (get_error 3000)) (status 400)))))
))

(var author authors#0)

(# Define functions for creating and updating the profile image table object)
(def create_profile_image (author session content_type data) (
	(# Create the profile image table object)
	(var profile_image (func create_author_profile_image_table_object (session.user_id content_type data)))

	(# Update the author with the uuid of the profile image table object)
	(var author.properties.profile_image profile_image.uuid)

	(# Update the author with the blurhash)
	(var author.properties.profile_image_blurhash (Blurhash.encode data))
))

(def update_profile_image (author profile_image content_type data) (
	(# Update the profile image table object of the author)
	(func update_author_profile_image_table_object (profile_image.uuid content_type data))

	(# Update the author with the blurhash)
	(var author.properties.profile_image_blurhash (Blurhash.encode data))
))

(# Get the profile image table object of the author)
(var profile_image_uuid author.properties.profile_image)

(if (is_nil profile_image_uuid) (
	(# Create the profile image)
	(func create_profile_image (author session content_type data))
) else (
	(# Try to get the profile image table object)
	(var profile_image (func get_table_object (profile_image_uuid (get_env "AUTHOR_PROFILE_IMAGE_TABLE_ID"))))

	(if (is_nil profile_image) (
		(# Create the profile image)
		(func create_profile_image (author session content_type data))
	) else (
		(# Update the profile image)
		(func update_profile_image (author profile_image content_type data))
	))
))

(render_json (hash) 200)