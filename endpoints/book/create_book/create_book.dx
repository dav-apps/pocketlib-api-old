(var json (parse_json (get_body)))

(var store_book_uuid json.store_book)
(var type json.type)

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Validate the content type)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header "Content-Type")))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Copy the store book into the library by creating a book with the file of the store book)
(# Validate missing fields)
(func render_validation_errors ((list
	(func validate_store_book_presence (store_book_uuid))
)))

(# Validate the property type)
(func render_validation_errors ((list
	(func validate_store_book_type (store_book_uuid))
)))

(# Get the store book)
(var store_book (func get_table_object (store_book_uuid (get_env "STORE_BOOK_TABLE_ID"))))

(if (is_nil store_book) (
	(# StoreBook does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3508)) (status 404)))))
))

(# Get the latest store book release)
(var store_book_release (func get_last_release_of_store_book (store_book true)))

(if (is_nil store_book_release) (
	(# StoreBookRelease does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3516)) (status 404)))))
))

(# Check if the user has purchased the store book)
(var purchase (Purchase.find_by_user_and_table_object session.user_id store_book.id))

(if (is_nil purchase) (
	(# Check if the user is an admin or the author of the store book)
	(var admins (get_env "ADMINS"))
	(var is_admin (admins.contains session.user_id))
	(var is_author (session.user_id == store_book.user_id))

	(if ((! is_admin) and (! is_author)) (
		(# Normal user)
		(var status (if (is_nil store_book.properties.status) "unpublished" else store_book.properties.status))

		(# Check if the user can access the store book)
		(if (status != "published") (
			(# Action not allowed)
			(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
		))

		(# Check if the store book is free)
		(if ((is_nil store_book.properties.price) or (store_book.properties.price == "0")) (
			(# Can't add free StoreBook to library without Purchase)
			(func render_validation_errors ((list (hash (error (get_error 3004)) (status 422)))))
		))

		(# Check if the user is on the Pro plan)
		(func render_validation_errors ((list
			(func validate_dav_pro_user (session.user_id))
		)))
	))
))

(# User can copy the store book into the library)
(# Check if the StoreBook is already in the library of the user)
(if (func is_store_book_in_user_library (session.user_id store_book.uuid)) (
	(func render_validation_errors ((list (hash (error (get_error 3005)) (status 422)))))
))

(# Get the table object of the store book file)
(var file_item_obj (func get_table_object (store_book_release.properties.file_item (get_env "STORE_BOOK_FILE_ITEM_TABLE_ID"))))

(if (is_nil file_item_obj) (
	(# StoreBookFileItem does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3518)) (status 404)))))
))

(var file_obj (func get_table_object (file_item_obj.properties.file (get_env "STORE_BOOK_FILE_TABLE_ID"))))

(if (is_nil file_obj) (
	(# StoreBookFile does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3510)) (status 404)))))
))

(# Get the type of the store book file)
(var book_type file_obj.properties.type)

(# Create the book)
(var book_properties (hash (store_book store_book.uuid) (file file_obj.uuid)))
(if (book_type == "application/pdf") (var book_properties.title store_book_release.properties.title))

(var book (func create_table_object (session.user_id (get_env "BOOK_TABLE_ID") book_properties)))

(# Create a TableObjectUserAccess for the file)
(func create_table_object_user_access (book.properties.file session.user_id (get_env "BOOK_FILE_TABLE_ID")))

(# Render the result as epub book)
(render_json
	(hash
		(uuid book.uuid)
		(store_book book.properties.store_book)
		(file book.properties.file)
	)
	201
)