(# Get the params)
(var uuid (get_param "uuid"))

(var data (get_body))

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Check if content type is supported)
(var content_type (get_header "Content-Type"))
(func render_validation_errors ((list
	(func validate_content_type_ebook (content_type))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Get the store book)
(var store_book (func get_table_object (uuid (get_env "STORE_BOOK_TABLE_ID"))))

(if (is_nil store_book) (
	(# Render Resource does not exist: StoreBook)
	(func render_validation_errors ((list (hash (error (get_error 3508)) (status 404)))))
))

(# Check if the store book is already published)
(if ((store_book.properties.status == "published") or (store_book.properties.status == "hidden")) (
	(func render_validation_errors ((list (hash (error (get_error 3404)) (status 422)))))
))

(# Get the collection of the store book)
(var collection (func get_table_object (store_book.properties.collection (get_env "STORE_BOOK_COLLECTION_TABLE_ID"))))

(if (is_nil collection) (
	(# Collection does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3506)) (status 404)))))
))

(# Get the author of the collection)
(var author (func get_table_object (collection.properties.author (get_env "AUTHOR_TABLE_ID"))))

(if (is_nil author) (
	(# Resource does not exist: Author)
	(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
))

(# Check if the store book belongs to the author of the user)
(if (session.user_id != author.user_id) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Define functions for creating and updating the file table object)
(def set_filename (store_book) (
	(# Set the file name if there is one)
	(var content_disposition (get_header "Content-Disposition"))

	(if (! (is_nil content_disposition)) (
		(var matches (Regex.match content_disposition /filename=\"(?<filename>.*)\"/))
		(if (! (is_nil matches.filename)) (
			(var store_book.properties.file_name matches.filename)
		))
	))
))

(def create_file (store_book session content_type data) (
	(# Create the file table object)
	(var file (func create_store_book_file_table_object (session.user_id content_type data)))

	(# Update the store book with the uuid of the file table object)
	(var store_book.properties.file file.uuid)

	(func set_filename (store_book))
))

(def update_file (store_book file content_type data) (
	(# Update the file of the file table object)
	(func update_store_book_file_table_object (file.uuid content_type data))

	(func set_filename (store_book))
))

(# Get the file table object of the store book)
(var file_uuid store_book.properties.file)

(if (is_nil file_uuid) (
	(# Create the file)
	(func create_file (store_book session content_type data))
) else (
	(# Try to get the file table object)
	(var file (func get_table_object (file_uuid (get_env "STORE_BOOK_FILE_TABLE_ID"))))

	(if (is_nil file) (
		(# Create the file)
		(func create_file (store_book session content_type data))
	) else (
		(# Update the file)
		(func update_file (store_book file content_type data))
	))
))

(render_json (hash) 200)