(# Get the params)
(var uuid (get_param "uuid"))

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))

(# Get the user)
(var user (func get_user (session.user_id)))

(# Get the store book)
(var store_book (func get_table_object (uuid (get_env "STORE_BOOK_TABLE_ID"))))

(if (is_nil store_book) (
	(# StoreBook does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3508)) (status 404)))))
))

(# Get the store book release)
(var store_book_release (func get_last_release_of_store_book (store_book true)))

(if (is_nil store_book_release) (
	(# StoreBookRelease does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3516)) (status 404)))))
))

(# Check if the user is the author of the store book)
(var is_author (session.user_id == store_book.user_id))

(# Get the status)
(var status (if (is_nil store_book.properties.status) "unpublished" else store_book.properties.status))

(# Check if the user can access the store book file)
(var can_access (
	(if (is_admin or is_author) (
		(true)
	) else (
		(# Check if the user is on dav Pro and if the store book is in the library of the user)
		((status == "published") and (user.plan == 2) and (func is_store_book_in_user_library (user.id store_book.uuid)))
	))
))

(if (! can_access) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Get the file item)
(var file_item_obj (func get_table_object (store_book_release.properties.file_item (get_env "STORE_BOOK_FILE_ITEM_TABLE_ID"))))

(if (is_nil file_item_obj) (
	(# StoreBookFileItem does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3518)) (status 404)))))
))

(# Get the file)
(var file_obj (func get_table_object (file_item_obj.properties.file (get_env "STORE_BOOK_FILE_TABLE_ID"))))

(if (is_nil file_obj) (
	(# StoreBookFile does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3510)) (status 404)))))
))

(var file (func get_table_object_file (file_obj.uuid)))

(# Return the content of the file)
(render_file file file_obj.properties.type (store_book_release.properties.title + "." + file_obj.properties.ext) 200)