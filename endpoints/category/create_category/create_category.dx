(var json (parse_json (get_body)))

(var key json.key)

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header "Content-Type")))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))
(if (! is_admin) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Validate missing fields)
(func render_validation_errors ((list
	(func validate_key_presence (key))
)))

(# Validate property types)
(func render_validation_errors ((list
	(func validate_key_type (key))
)))

(# Validate too short and too long fields)
(func render_validation_errors ((list
	(func validate_key_length (key))
)))

(# Validate the key)
(func render_validation_errors ((list
	(func validate_key_validity (key))
)))

(var key key.downcase)

(# Check if a category with the key already exists)
(var categories (TableObject.find_by_property admins#0 (get_env "CATEGORY_TABLE_ID") "key" key))

(if (categories.length > 0) (
	(# Key already taken)
	(func render_validation_errors ((list (hash (error (get_error 3200)) (status 422)))))
))

(# Create the category)
(var category (func create_table_object (admins#0 (get_env "CATEGORY_TABLE_ID") (hash (key key)))))

(# Render the result)
(render_json (hash
	(uuid category.uuid)
	(key category.properties.key)
) 201)