(# Get the params)
(var uuid (get_param "uuid"))
(var language (get_param "language"))

(var json (parse_json (get_body)))

(var bio json.bio)

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header "Content-Type")))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))

(if (! is_admin) (
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Get the author)
(var author (func get_table_object (uuid (get_env "AUTHOR_TABLE_ID"))))

(if (is_nil author) (
	(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
))

(# Check if the author belongs to the user)
(if (session.user_id != author.user_id) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Validate missing fields)
(func render_validation_errors ((list
	(func validate_bio_presence (bio))
)))

(# Validate property types)
(func render_validation_errors ((list
	(func validate_bio_type (bio))
)))

(# Validate too short and too long fields)
(func render_validation_errors ((list
	(func validate_bio_length (bio))
)))

(# Validate the language)
(func render_validation_errors ((list
	(func validate_language_supported (language))
)))

(# Get the bios of the author)
(var bios (func get_author_bios_by_string (author.properties.bios true)))

(# Check if the bio in the given language already exists)
(var bio_uuid nil)
(for author_bio in bios (
	(if (author_bio.language == language) (
		(var bio_uuid author_bio.uuid)
	))
))

(if (is_nil bio_uuid) (
	(# Create a new bio)
	(var bio_obj (func create_table_object (session.user_id (get_env "AUTHOR_BIO_TABLE_ID") (hash (bio bio) (language language)))))

	(# Update the author with the new bio uuid)
	(func add_bio_to_author (author bio_obj.uuid))
) else (
	(# Update the existing bio)
	(func update_table_object (bio_uuid (hash (bio bio))))
	(var bio_obj (func get_table_object (bio_uuid (get_env "AUTHOR_BIO_TABLE_ID"))))
))

(# Render the result)
(render_json (hash
	(bio bio_obj.properties.bio)
	(language bio_obj.properties.language)
))