(# Get the params)
(var uuid (get_param "uuid"))
(var fields_str (get_param "fields"))

(if (is_nil fields_str) (
	(var fields (list "uuid"))
) elseif (fields_str == "*") (
	(var fields (list "uuid" "store_book" "release_name" "release_notes" "title" "description" "isbn" "price" "status" "cover" "file" "categories"))
) else (
	(# Process the fields string)
	(var fields (func process_fields (fields_str)))
))

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))

(# Get the store book release)
(var store_book_release (func get_table_object (uuid (get_env "STORE_BOOK_RELEASE_TABLE_ID"))))

(if (is_nil store_book_release) (
	(# StoreBookRelease does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3516)) (status 404)))))
))

(# Check if the user is the author of the store book)
(var is_author (session.user_id == store_book_release.user_id))

(if ((! is_author) and (! is_admin)) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(if (fields.contains "store_book") (
	(# Get the store book)
	(var store_book (func get_table_object (store_book_release.properties.store_book (get_env "STORE_BOOK_TABLE_ID"))))

	(if (is_nil store_book) (
		(# StoreBook does not exist)
		(func render_validation_errors ((list (hash (error (get_error 3508)) (status 404)))))
	))
))

(if (
	(fields.contains "cover")
	or (fields.contains "cover.url")
	or (fields.contains "cover.aspect_ratio")
	or (fields.contains "cover.blurhash")
) (
	(# Get the cover item)
	(var cover_item (func get_table_object (store_book_release.properties.cover_item (get_env "STORE_BOOK_COVER_ITEM_TABLE_ID"))))

	(if (!(is_nil cover_item)) (
		(# Get the cover)
		(var cover (func get_table_object (cover_item.properties.cover (get_env "STORE_BOOK_COVER_TABLE_ID"))))
	))
))

(if (
	(fields.contains "file")
	or (fields.contains "file.file_name")
) (
	(# Get the file item)
	(var file_item (func get_table_object (store_book_release.properties.file_item (get_env "STORE_BOOK_FILE_ITEM_TABLE_ID"))))
))

(# Render the result)
(var result (hash))

(if (fields.contains "uuid") (var result.uuid store_book_release.uuid))
(if (fields.contains "store_book") (var result.store_book store_book.uuid))
(if (fields.contains "release_name") (var result.release_name store_book_release.properties.release_name))
(if (fields.contains "release_notes") (var result.release_notes store_book_release.properties.release_notes))
(if (fields.contains "title") (var result.title store_book_release.properties.title))
(if (fields.contains "description") (var result.description store_book_release.properties.description))
(if (fields.contains "price") (var result.price (to_int store_book_release.properties.price)))
(if (fields.contains "isbn") (var result.isbn store_book_release.properties.isbn))
(if (fields.contains "status") (var result.status store_book_release.properties.status))

(if (
	(fields.contains "cover")
	or (fields.contains "cover.url")
	or (fields.contains "cover.aspect_ratio")
	or (fields.contains "cover.blurhash")
) (
	(if ((is_nil cover_item) or (is_nil cover)) (
		(var result.cover nil)
	) else (
		(var cover_hash (hash))

		(if ((fields.contains "cover") or (fields.contains "cover.url")) (var cover_hash.url (TableObject.get_cdn_url cover.uuid (hash (etag cover.properties.etag)))))
		(if ((fields.contains "cover") or (fields.contains "cover.aspect_ratio")) (var cover_hash.aspect_ratio cover_item.properties.aspect_ratio))
		(if ((fields.contains "cover") or (fields.contains "cover.blurhash")) (var cover_hash.blurhash cover_item.properties.blurhash))

		(var result.cover cover_hash)
	))
))

(if (
	(fields.contains "file")
	or (fields.contains "file.file_name")
) (
	(if (is_nil file_item) (
		(var result.file nil)
	) else (
		(var result.file (hash (file_name file_item.properties.file_name)))
	))
))

(if (fields.contains "categories") (var result.categories (func get_category_keys_by_string (store_book_release.properties.categories))))

(render_json result 200)