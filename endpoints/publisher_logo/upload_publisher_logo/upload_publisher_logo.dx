(# Get the params)
(var uuid (get_param "uuid"))
(var fields_str (get_param "fields"))

(if (is_nil fields_str) (
	(var fields (list "uuid"))
) elseif (fields_str == "*") (
	(var fields (list "uuid" "url" "blurhash"))
) else (
	(# Process the fields string)
	(var fields (func process_fields (fields_str)))
))

(var data (get_body))

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Check if content type is supported)
(var content_type (get_header "Content-Type"))
(func render_validation_errors ((list
	(func validate_content_type_image (content_type))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))

(if (uuid == "mine") (
	(if is_admin (
		(# User is an admin)
		(func render_validation_errors ((list (hash (error (get_error 3013)) (status 400)))))
	))

	(# Get the publisher of the user)
	(var publisher_objects (func get_publisher_table_objects (session.user_id)))

	(if (publisher_objects.length == 0) (
		(# User is not a publisher)
		(func render_validation_errors ((list (hash (error (get_error 3018)) (status 400)))))
	))

	(var publisher publisher_objects#0)
) else (
	(if (! is_admin) (
		(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
	))

	(# Get the publisher)
	(var publisher (func get_table_object (uuid (get_env "PUBLISHER_TABLE_ID"))))

	(if (is_nil publisher) (
		(# Publisher does not exist)
		(func render_validation_errors ((list (hash (error (get_error 3520)) (status 404)))))
	))

	(# Check if the author belongs to the user)
	(if (session.user_id != publisher.user_id) (
		(# Action not allowed)
		(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
	))
))

(# Define functions for creating and updating the logo table object)
(def update_logo_item_properties (logo_item data) (
	(# Update the logo item with the blurhash)
	(var logo_item.properties.blurhash (Blurhash.encode data))
))

(def create_logo (publisher session content_type data) (
	(# Create the logo table object)
	(var logo (func create_publisher_logo_table_object (publisher.user_id content_type data)))

	(# Create the logo item table object)
	(var logo_item (func create_table_object (
		publisher.user_id
		(get_env "PUBLISHER_LOGO_ITEM_TABLE_ID")
		(hash
			(logo logo.uuid)
		)
	)))

	(# Set the properties of the logo item)
	(func update_logo_item_properties (logo_item data))

	(return logo_item)
))

(def update_logo (logo_item content_type data) (
	(# Update the file of the logo table object)
	(func update_image_table_object (logo_item.properties.logo content_type data))

	(func update_logo_item_properties (logo_item data))
))

(# Get the logo item of the publisher)
(var logo_item (func get_table_object (publisher.properties.logo_item (get_env "PUBLISHER_LOGO_ITEM_TABLE_ID"))))

(if (is_nil logo_item) (
	(# Create the logo and logo item)
	(var logo_item (func create_logo (publisher session content_type data)))
	(var publisher.properties.logo_item logo_item.uuid)
) else (
	(# Update the logo)
	(func update_logo (logo_item content_type data))
))

(# Get the logo)
(var logo (func get_table_object (logo_item.properties.logo (get_env "PUBLISHER_LOGO_TABLE_ID"))))

(if (is_nil logo) (
	(# PublisherLogo does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3522)) (status 404)))))
))

(# Render the result)
(var result (hash))

(if (fields.contains "uuid") (var result.uuid logo_item.uuid))
(if (fields.contains "url") (var result.url (TableObject.get_cdn_url logo.uuid (hash (etag logo.properties.etag)))))
(if (fields.contains "blurhash") (var result.blurhash logo_item.properties.blurhash))

(render_json result 200)