(# Get the params)
(var fields_str (get_param "fields"))

(if (is_nil fields_str) (
	(var fields (list "uuid"))
) elseif (fields_str == "*") (
	(var fields (list "uuid" "author" "name" "language"))
) else (
	(# Process the fields string)
	(var fields (func process_fields (fields_str)))
))

(var json (parse_json (get_body)))

(var author json.author)
(var name json.name)
(var language json.language)
(var store_books json.store_books)

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header "Content-Type")))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))

(# Validate missing fields)
(func render_validation_errors ((list
	(if is_admin (func validate_author_presence (author)))
	(func validate_name_presence (name))
	(func validate_language_presence (language))
)))

(# Validate property types)
(func render_validation_errors ((list
	(if is_admin (func validate_author_type (author)))
	(func validate_name_type (name))
	(func validate_language_type (language))
	(if (!(is_nil store_books)) (func validate_store_books_type (store_books)))
)))

(# Validate too short and too long fields)
(func render_validation_errors ((list
	(func validate_name_length (name))
)))

(# Validate the language)
(func render_validation_errors ((list
	(func validate_language_supported (language))
)))

(if is_admin (
	(var author_obj (func get_table_object (author (get_env "AUTHOR_TABLE_ID") session.user_id)))

	(if (is_nil author_obj) (
		(# Author does not exist)
		(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
	))
) else (
	(var authors (func get_author_table_objects (session.user_id)))

	(if (authors.length == 0) (
		(# User is not an author)
		(func render_validation_errors ((list (hash (error (get_error 3000)) (status 400)))))
	))

	(var author_obj authors#0)
))

(if (is_nil store_books) (
	(var store_books (list))
) else (
	(# Validate the store_books)
	(for uuid in store_books (
		(# Get the store book)
		(var store_book (func get_table_object (uuid (get_env "STORE_BOOK_TABLE_ID") session.user_id)))

		(if (is_nil store_book) (
			(# StoreBook does not exist)
			(func render_validation_errors ((list (hash (error (get_error 3508)) (status 404)))))
		))

		(# Check if the store book has the same language as the series)
		(if (store_book.properties.language != language) (
			(# Language of StoreBook does not match language of StoreBookSeries)
			(func render_validation_errors ((list (hash (error (get_error 3015)) (status 400)))))
		))
	))
))

(# Create the series)
(var series (func create_table_object (
	session.user_id
	(get_env "STORE_BOOK_SERIES_TABLE_ID")
	(hash
		(author author_obj.uuid)
		(name name)
		(language language)
		(store_books (store_books.join ","))
	)
)))

(# Update the series property of the author)
(func add_series_to_author (author_obj series.uuid))

(# Add the store book series to the latest series)
(func add_store_book_series_to_latest_series_collection (series))

(# Render the result)
(var result (hash))

(if (fields.contains "uuid") (var result.uuid series.uuid))
(if (fields.contains "author") (var result.author series.properties.author))
(if (fields.contains "name") (var result.name series.properties.name))
(if (fields.contains "language") (var result.language series.properties.language))

(render_json result 201)