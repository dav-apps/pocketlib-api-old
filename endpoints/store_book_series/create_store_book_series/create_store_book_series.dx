(# Get the params)
(var fields_str (get_param "fields"))

(if (is_nil fields_str) (
	(var fields (list "uuid"))
) elseif (fields_str == "*") (
	(var fields (list "uuid" "author" "name"))
) else (
	(# Process the fields string)
	(var fields (func process_fields (fields_str)))
))

(var json (parse_json (get_body)))

(var author json.author)
(var name json.name)
(var language json.language)
(var collections json.collections)

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header "Content-Type")))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))

(# Validate missing fields)
(func render_validation_errors ((list
	(if is_admin (func validate_author_presence (author)))
	(func validate_name_presence (name))
	(func validate_language_presence (language))
)))

(# Validate property types)
(func render_validation_errors ((list
	(if is_admin (func validate_author_type (author)))
	(func validate_name_type (name))
	(func validate_language_type (language))
	(if (!(is_nil collections)) (func validate_collections_type (collections)))
)))

(# Validate too short and too long fields)
(func render_validation_errors ((list
	(func validate_name_length (name))
)))

(# Validate the language)
(func render_validation_errors ((list
	(func validate_language_supported (language))
)))

(if is_admin (
	(var author_obj (func get_table_object (author (get_env "AUTHOR_TABLE_ID") session.user_id)))

	(if (is_nil author_obj) (
		(# Author does not exist)
		(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
	))
) else (
	(var authors (func get_author_table_objects (session.user_id)))

	(if (authors.length == 0) (
		(# User is not an author)
		(func render_validation_errors ((list (hash (error (get_error 3000)) (status 400)))))
	))

	(var author_obj authors#0)
))

(if (is_nil collections) (
	(var collections (list))
) else (
	(# Validate the collections)
	(for uuid in collections (
		(# Get the collection)
		(var collection_obj (func get_table_object (uuid (get_env "STORE_BOOK_COLLECTION_TABLE_ID") session.user_id)))

		(if (is_nil collection_obj) (
			(# Collection does not exist)
			(func render_validation_errors ((list (hash (error (get_error 3506)) (status 404)))))
		))
	))
))

(# Create the series name)
(var series_name (func create_table_object (
	session.user_id
	(get_env "STORE_BOOK_SERIES_NAME_TABLE_ID")
	(hash
		(name name)
		(language language)
	)
)))

(# Create the series)
(var series (func create_table_object (
	session.user_id
	(get_env "STORE_BOOK_SERIES_TABLE_ID")
	(hash
		(author author_obj.uuid)
		(names series_name.uuid)
		(collections (collections.join ","))
	)
)))

(# Update the series property of the author)
(func add_series_to_author (author_obj series.uuid))

(# Add the store book series to the latest series)
(func add_store_book_series_to_latest_series_collection (series))

(# Render the result)
(var result (hash))

(if (fields.contains "uuid") (var result.uuid series.uuid))
(if (fields.contains "author") (var result.author series.properties.author))

(if (
	(fields.contains "name")
	or (fields.contains "name.value")
	or (fields.contains "name.language")
) (
	(var name_hash (hash))

	(if ((fields.contains "name") or (fields.contains "name.value")) (var name_hash.value name))
	(if ((fields.contains "name") or (fields.contains "name.language")) (var name_hash.language language))

	(var result.name name_hash)
))

(render_json result 201)