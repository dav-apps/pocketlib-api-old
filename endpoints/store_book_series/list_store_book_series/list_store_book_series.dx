(# Get the params)
(var fields_str (get_param "fields"))
(var languages (get_param "languages"))
(var limit (to_int (get_param "limit")))
(var latest ((get_param "latest") == "true"))
(var author_uuid (get_param "author"))
(var store_book_uuid (get_param "store_book"))

(if (is_nil fields_str) (
	(var fields (list "type" "items.uuid"))
) elseif (fields_str == "*") (
	(var fields (list "type" "items.uuid" "items.author" "items.name" "items.language"))
) else (
	(# Process the fields string)
	(var fields (func process_fields (fields_str)))
))

(var language_list (func process_languages (languages)))

(if latest (
	(# Get the latest store book series)
	(var series_uuids (func get_latest_store_book_series_table_object_uuids ()))
	(var series_uuids series_uuids.reverse)
) elseif (!(is_nil author_uuid)) (
	(# Get the author)
	(var author (func get_table_object (author_uuid (get_env "AUTHOR_TABLE_ID"))))

	(if (is_nil author) (
		(# Author does not exist)
		(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
	))

	(if (is_nil author.properties.series) (
		(var series_uuids (list))
	) else (
		(var series_uuids (author.properties.series.split ","))
	))
) elseif (!(is_nil store_book_uuid)) (
	(# Get the store book)
	(var store_book (func get_table_object (store_book_uuid (get_env "STORE_BOOK_TABLE_ID"))))

	(if (is_nil store_book) (
		(# StoreBook does not exist)
		(func render_validation_errors ((list (hash (error (get_error 3508)) (status 404)))))
	))

	(# Get all series where the store book uuid is in the store_books property)
	(var series_list (TableObject.find_by_property
		store_book.user_id
		(get_env "STORE_BOOK_SERIES_TABLE_ID")
		"store_books"
		store_book.uuid
		false
	))

	(var series_uuids (list))

	(for series in series_list (
		(series_uuids.push series.uuid)
	))
) else (
	(var series_uuids (list))
))

(var series_list (list))

(for series_uuid in series_uuids (
	(# Get the store book series)
	(var series (func get_table_object (series_uuid (get_env "STORE_BOOK_SERIES_TABLE_ID"))))
	(if (is_nil series) (continue))

	(if latest (
		(# Check if the series is in one of the given languages)
		(if (!(language_list.contains series.properties.language)) (continue))
	))

	(if latest (
		(# Check if all store books of the series are published)
		(var store_books_string series.properties.store_books)
		(if (is_nil store_books_string) (continue))

		(var store_book_uuids (store_books_string.split ","))
		(var published_books 0)

		(for store_book_uuid in store_book_uuids (
			(var store_book (func get_table_object (store_book_uuid (get_env "STORE_BOOK_TABLE_ID"))))
			(if (is_nil store_book) (break))

			(if (store_book.properties.status == "published") (var published_books (published_books + 1)))
		))

		(if (published_books < store_book_uuids.length) (continue))
	))

	(# Add the series to the list)
	(var series_hash (hash))

	(if (fields.contains "items.uuid") (var series_hash.uuid series.uuid))
	(if (fields.contains "items.author") (var series_hash.author series.properties.author))
	(if (fields.contains "items.name") (var series_hash.name series.properties.name))
	(if (fields.contains "items.language") (var series_hash.language series.properties.language))

	(series_list.push series_hash)

	(# Check if the limit is reached)
	(if ((limit > 0) and (series_list.length >= limit)) (break))
))

(# Render the result)
(var result (hash))

(if (fields.contains "type") (var result.type "store_book_series"))
(var result.items series_list)

(render_json result 200)