(# Get the params)
(var fields_str (get_param "fields"))
(var languages (get_param "languages"))
(var limit (to_int (get_param "limit")))
(var latest ((get_param "latest") == "true"))
(var author_uuid (get_param "author"))

(if (is_nil fields_str) (
	(var fields (list "type" "items.uuid"))
) elseif (fields_str == "*") (
	(var fields (list "type" "items.uuid" "items.name"))
) else (
	(# Process the fields string)
	(var fields (func process_fields (fields_str)))
))

(var language_list (func process_languages (languages)))

(if latest (
	(# Get the latest store book series)
	(var series_uuids (func get_latest_store_book_series_table_object_uuids ()))
	(var series_uuids series_uuids.reverse)
) elseif (!(is_nil author_uuid)) (
	(# Get the author)
	(var author (func get_table_object (author_uuid (get_env "AUTHOR_TABLE_ID"))))

	(if (is_nil author) (
		(# Author does not exist)
		(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
	))

	(if (is_nil author.properties.series) (
		(var series_uuids (list))
	) else (
		(var series_uuids (author.properties.series.split ","))
	))
) else (
	(var series_uuids (list))
))

(var series_list (list))

(for series_uuid in series_uuids (
	(# Get the store book series)
	(var series (func get_table_object (series_uuid (get_env "STORE_BOOK_SERIES_TABLE_ID"))))
	(if (is_nil series) (continue))

	(if latest (
		(# Check if the series has a name for one of the given languages)
		(var names (func get_series_names_by_string_as_hash (series.properties.names)))

		(var has_lang false)

		(for lang in language_list (
			(if (!(is_nil names[lang])) (
				(var has_lang true)
				(break)
			))
		))

		(if (! has_lang) (continue))

		(# Get the store book collections)
		(if (is_nil series.properties.collections) (continue))

		(var collection_uuids (series.properties.collections.split ","))
		(var store_book_count 0)

		(for collection_uuid in collection_uuids (
			(var collection (func get_table_object (collection_uuid (get_env "STORE_BOOK_COLLECTION_TABLE_ID"))))
			(if (is_nil collection) (continue))

			(# Get the store books of the collection)
			(if (is_nil collection.properties.books) (continue))

			(for store_book_uuid in (collection.properties.books.split ",") (
				(var store_book (func get_table_object (store_book_uuid (get_env "STORE_BOOK_TABLE_ID"))))
				(if (is_nil store_book) (continue))
				(if (store_book.properties.status != "published") (continue))

				(# Check if the store book is in a preferred language)
				(if (!(language_list.contains store_book.properties.language)) (continue))

				(var store_book_release (func get_last_release_of_store_book (store_book true)))
				(if ((is_nil store_book_release) or (store_book_release.properties.status != "published")) (continue))

				(# Get the cover item)
				(var cover_item (func get_table_object (store_book_release.properties.cover_item (get_env "STORE_BOOK_COVER_ITEM_TABLE_ID"))))
				(if (is_nil cover_item) (continue))

				(var store_book_count (store_book_count + 1))
				(break)
			))
		))

		(# The series should have at least one store book for each collection in one of the given languages)
		(if (store_book_count < collection_uuids.length) (continue))
	))

	(# Add the series to the list)
	(var series_hash (hash))

	(if (fields.contains "items.uuid") (var series_hash.uuid series.uuid))

	(if (
		(fields.contains "items.name")
		or (fields.contains "items.name.value")
		or (fields.contains "items.name.language")
	) (
		(var series_hash.name (
			(func find_series_name_by_languages (
				series.properties.names
				language_list
				((fields.contains "items.name") or (fields.contains "items.name.value"))
				((fields.contains "items.name") or (fields.contains "items.name.language"))
			))
		))
	))

	(series_list.push series_hash)

	(# Check if the limit is reached)
	(if ((limit > 0) and (series_list.length >= limit)) (break))
))

(# Render the result)
(var result (hash))

(if (fields.contains "type") (var result.type "store_book_series"))
(var result.items series_list)

(render_json result 200)