(# Get the params)
(var uuid (get_param "uuid"))
(var fields_str (get_param "fields"))

(if (is_nil fields_str) (
	(var fields (list "uuid"))
) elseif (fields_str == "*") (
	(var fields (list "uuid" "author" "name" "language"))
) else (
	(# Process the fields string)
	(var fields (func process_fields (fields_str)))
))

(var json (parse_json (get_body)))

(var name json.name)
(var store_books json.store_books)

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header "Content-Type")))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))

(# Get the series)
(var series (func get_table_object (uuid (get_env "STORE_BOOK_SERIES_TABLE_ID"))))

(if (is_nil series) (
	(# Series does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3514)) (status 404)))))
))

(var series_author (func get_table_object (series.properties.author (get_env "AUTHOR_TABLE_ID") session.user_id)))

(if (is_nil series_author) (
	(# Author does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
))

(# Check if the user is an admin or if the store book belongs to the author of the user)
(if ((! is_admin) and (session.user_id != series_author.user_id)) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Validate property types)
(func render_validation_errors ((list
	(if (!(is_nil name)) (func validate_name_type (name)))
	(if (!(is_nil store_books)) (func validate_store_books_type (store_books)))
)))

(# Validate too short and too long fields)
(func render_validation_errors ((list
	(if (!(is_nil name)) (func validate_name_length (name)))
)))

(if (!(is_nil store_books)) (
	(# Validate the store books)
	(for uuid in store_books (
		(# Get the store book)
		(var store_book (func get_table_object (uuid (get_env "STORE_BOOK_TABLE_ID") session.user_id)))

		(if (is_nil store_book) (
			(# StoreBook does not exist)
			(func render_validation_errors ((list (hash (error (get_error 3508)) (status 404)))))
		))

		(# Check if the store book has the same language as the series)
		(if (store_book.properties.language != series.properties.language) (
			(# Language of StoreBook does not match language of StoreBookSeries)
			(func render_validation_errors ((list (hash (error (get_error 3015)) (status 400)))))
		))
	))
))

(# Update the series)
(if (!(is_nil name)) (var series.properties.name name))
(if (!(is_nil store_books)) (var series.properties.store_books (store_books.join ",")))

(# Render the result)
(var result (hash))

(if (fields.contains "uuid") (var result.uuid series.uuid))
(if (fields.contains "author") (var result.author series.properties.author))
(if (fields.contains "name") (var result.name series.properties.name))
(if (fields.contains "language") (var result.language series.properties.language))

(render_json result 200)