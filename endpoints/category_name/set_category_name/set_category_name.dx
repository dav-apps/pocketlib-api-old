(# Get the params)
(var uuid (get_param "uuid"))
(var language (get_param "language"))

(var json (parse_json (get_body)))

(var name json.name)

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header "Content-Type")))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))
(if (! is_admin) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Get the category)
(var category (func get_table_object (uuid (get_env "CATEGORY_TABLE_ID"))))

(if (is_nil category) (
	(# Category does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3511)) (status 404)))))
))

(# Validate missing fields)
(func render_validation_errors ((list
	(func validate_name_presence (name))
)))

(# Validate property types)
(func render_validation_errors ((list
	(func validate_name_type (name))
)))

(# Validate too short and too long fields)
(func render_validation_errors ((list
	(func validate_name_length (name))
)))

(# Validate the language)
(func render_validation_errors ((list
	(func validate_language_supported (language))
)))

(# Get the names of the category)
(var names (func get_category_names_by_string (category.properties.names true)))

(# Check if the name in the given language already exists)
(var name_uuid nil)
(for category_name in names (
	(if (category_name.language == language) (
		(var name_uuid category_name.uuid)
	))
))

(if (is_nil name_uuid) (
	(# Create a new name)
	(var name_obj (func create_table_object (admins#0 (get_env "CATEGORY_NAME_TABLE_ID") (hash (name name) (language language)))))

	(# Update the category with the new name uuid)
	(func add_name_to_category (category name_obj.uuid))
) else (
	(# Update the existing name)
	(func update_table_object (name_uuid (hash (name name))))
	(var name_obj (func get_table_object (name_uuid (get_env "CATEGORY_NAME_TABLE_ID"))))
))

(# Render the result)
(render_json (hash
	(name name_obj.properties.name)
	(language name_obj.properties.language)
))