(var json (parse_json (get_body)))

(var first_name json.first_name)
(var last_name json.last_name)

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header "Content-Type")))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var is_admin (env.ADMINS.contains session.user_id))

(# Get the authors of the user)
(var authors (func get_author_table_objects (session.user_id)))

(if ((! is_admin) and (authors.length > 0)) (
	(func render_validation_errors ((list (hash (error (get_error 3001)) (status 400)))))
))

(# Validate missing fields)
(func render_validation_errors ((list 
	(func validate_first_name_presence (first_name)) 
	(func validate_last_name_presence (last_name))
)))

(# Validate field types)
(func render_validation_errors ((list
	(func validate_first_name_type (first_name))
	(func validate_last_name_type (last_name))
)))

(# Validate too short and too long fields)
(func render_validation_errors ((list
	(func validate_first_name_length (first_name))
	(func validate_last_name_length (last_name))
)))

(# Create the author)
(var author (func create_table_object (session.user_id env.AUTHOR_TABLE_ID (hash (first_name first_name) (last_name last_name)))))

(# Add the author to the latest authors)
(func add_author_to_latest_authors_collection (author))

(# Render the result)
(render_json (hash
	(uuid author.uuid)
	(first_name first_name)
	(last_name last_name)
	(website_url nil)
	(facebook_username nil)
	(instagram_username nil)
	(twitter_username nil)
	(bios (list))
	(collections (list))
	(profile_image false)
	(profile_image_blurhash nil)
) 201)