(# Get the params)
(var fields_str (get_param "fields"))

(if (is_nil fields_str) (
	(var fields (list "uuid"))
) elseif (fields_str == "*") (
	(var fields (list "uuid" "publisher" "first_name" "last_name" "bio" "website_url" "facebook_username" "instagram_username" "twitter_username" "profile_image"))
) else (
	(# Process the fields string)
	(var fields (func process_fields (fields_str)))
))

(var json (parse_json (get_body)))

(var publisher_uuid json.publisher)
(var first_name json.first_name)
(var last_name json.last_name)

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header "Content-Type")))
)))

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))

(# Get the authors of the user)
(var authors (func get_author_table_objects (session.user_id)))

(if ((! is_admin) and (authors.length > 0)) (
	(func render_validation_errors ((list (hash (error (get_error 3001)) (status 400)))))
))

(# Validate missing fields)
(func render_validation_errors ((list 
	(func validate_first_name_presence (first_name)) 
	(func validate_last_name_presence (last_name))
)))

(# Validate field types)
(func render_validation_errors ((list
	(func validate_first_name_type (first_name))
	(func validate_last_name_type (last_name))
)))

(# Validate too short and too long fields)
(func render_validation_errors ((list
	(func validate_first_name_length (first_name))
	(func validate_last_name_length (last_name))
)))

(var author_properties (hash (first_name first_name) (last_name last_name)))

(if (is_admin and (!(is_nil publisher_uuid))) (
	(# Get the publisher)
	(var publisher (func get_table_object (publisher_uuid (get_env "PUBLISHER_TABLE_ID"))))

	(if (is_nil publisher) (
		(# Publisher does not exist)
		(func render_validation_errors ((list (hash (error (get_error 3520)) (status 404)))))
	))

	(# Check if the publisher belongs to the user)
	(if (publisher.user_id != session.user_id) (
		(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
	))

	(var author_properties.publisher publisher.uuid)
))

(# Create the author)
(var author (func create_table_object (
	session.user_id
	(get_env "AUTHOR_TABLE_ID")
	author_properties
)))

(# Add the author to the latest authors)
(func add_author_to_latest_authors_collection (author))

(if (is_admin and (!(is_nil publisher_uuid))) (
	(# Add the author to the authors of the publisher)
	(func add_author_to_publisher (publisher author.uuid))
))

(# Render the result)
(var result (hash))

(if (fields.contains "uuid") (var result.uuid author.uuid))
(if (fields.contains "publisher") (var result.publisher author.properties.publisher))
(if (fields.contains "first_name") (var result.first_name author.properties.first_name))
(if (fields.contains "last_name") (var result.last_name author.properties.last_name))
(if (fields.contains "bio") (var result.bio nil))
(if (fields.contains "website_url") (var result.website_url nil))
(if (fields.contains "facebook_username") (var result.facebook_username nil))
(if (fields.contains "instagram_username") (var result.instagram_username nil))
(if (fields.contains "twitter_username") (var result.twitter_username nil))
(if (fields.contains "profile_image") (var result.profile_image nil))

(render_json result 201)