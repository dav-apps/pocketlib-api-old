(var language_list (list))

(if (is_nil books) (
	(var books false)
) else (
	(var books (books == "true"))
))

(if books (
	(# Get the languages)
	(if (is_nil languages) (
		(language_list.push "en")
	) else (
		(# Read the languages string and add the languages to the list)
		(for language in (languages.split ",") (
			(# Validate the languages)
			(func render_validation_errors ((list
				(func validate_language_supported (language))
			)))

			(language_list.push language)
		))
	))
))

(# Get the author)
(var author (func get_table_object (uuid (get_env "AUTHOR_TABLE_ID"))))

(if (is_nil author) (
	(# Author does not exist)
	(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
))

(# Get the bios of the author)
(var bios (func get_author_bios_by_string (author.properties.bios false)))

(if books (
	(# Get all store books of the author)
	(var author_books (list))

	(# Get the collection of the author)
	(var collection_table_objects (TableObject.find_by_property author.user_id (get_env "STORE_BOOK_COLLECTION_TABLE_ID") "author" author.uuid))

	(for collection_table_object in collection_table_objects (
		(var store_book_uuids (collection_table_object.properties.books.split ","))

		(for uuid in store_book_uuids (
			(var store_book (func get_table_object (uuid (get_env "STORE_BOOK_TABLE_ID"))))

			(if (!(is_nil store_book)) (
				(if ((store_book.properties.status == "published") and (language_list.contains store_book.properties.language)) (
					(author_books.push (hash
						(uuid store_book.uuid)
						(title store_book.properties.title)
						(description store_book.properties.description)
						(language store_book.properties.language)
						(status store_book.properties.status)
						(cover (!(is_nil store_book.properties.cover)))
						(cover_aspect_ratio store_book.properties.cover_aspect_ratio)
						(cover_blurhash store_book.properties.cover_blurhash)
						(file (!(is_nil store_book.properties.file)))
						(file_name store_book.properties.file_name)
					))
				))
			))
		))
	))
	
	(# Render the result)
	(render_json (hash
		(uuid author.uuid)
		(first_name author.properties.first_name)
		(last_name author.properties.last_name)
		(website_url author.properties.website_url)
		(facebook_username author.properties.facebook_username)
		(instagram_username author.properties.instagram_username)
		(twitter_username author.properties.twitter_username)
		(bios bios)
		(books author_books)
		(profile_image_blurhash author.properties.profile_image_blurhash)
		(profile_image (!(is_nil author.properties.profile_image)))
	))
) else (
	(# Get the collections of the author)
	(var collections (func get_collections_by_string (author.properties.collections)))

	(# Render the result)
	(render_json (hash
		(uuid author.uuid)
		(first_name author.properties.first_name)
		(last_name author.properties.last_name)
		(website_url author.properties.website_url)
		(facebook_username author.properties.facebook_username)
		(instagram_username author.properties.instagram_username)
		(twitter_username author.properties.twitter_username)
		(bios bios)
		(collections collections)
		(profile_image (!(is_nil author.properties.profile_image)))
		(profile_image_blurhash author.properties.profile_image_blurhash)
	) 200)
))