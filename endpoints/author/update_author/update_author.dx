(# Get the params)
(var uuid (get_param "uuid"))
(var fields_str (get_param "fields"))
(var languages (get_param "languages"))

(if (is_nil fields_str) (
	(var fields (list "uuid"))
) elseif (fields_str == "*") (
	(var fields (list "uuid" "first_name" "last_name" "bio" "website_url" "facebook_username" "instagram_username" "twitter_username" "profile_image"))
) else (
	(# Process the fields string)
	(var fields (func process_fields (fields_str)))
))

(var language_list (func process_languages (languages)))

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header "Content-Type")))
)))

(var json (parse_json (get_body)))

(var first_name json.first_name)
(var last_name json.last_name)
(var website_url json.website_url)
(var raw_facebook_username json.facebook_username)
(var raw_instagram_username json.instagram_username)
(var raw_twitter_username json.twitter_username)

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))

(if (uuid == "mine") (
	(if is_admin (
		(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
	))

	(# Get the author of the user)
	(var authors (func get_author_table_objects (session.user_id)))

	(if (authors.length == 0) (
		(func render_validation_errors ((list (hash (error (get_error 3000)) (status 400)))))
	))

	(var author authors#0)
) else (
	(if (! is_admin) (
		(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
	))

	(# Get the author)
	(var author (func get_table_object (uuid (get_env "AUTHOR_TABLE_ID"))))

	(if (is_nil author) (
		(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
	))

	(# Check if the author belongs to the user)
	(if (session.user_id != author.user_id) (
		(# Action not allowed)
		(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
	))
))

(# Validate the property types)
(func render_validation_errors ((list
	(if (!(is_nil first_name)) (func validate_first_name_type (first_name)))
	(if (!(is_nil last_name)) (func validate_last_name_type (last_name)))
	(if (!(is_nil website_url)) (func validate_website_url_type (website_url)))
	(if (!(is_nil raw_facebook_username)) (func validate_facebook_username_type (raw_facebook_username)))
	(if (!(is_nil raw_instagram_username)) (func validate_instagram_username_type (raw_instagram_username)))
	(if (!(is_nil raw_twitter_username)) (func validate_twitter_username_type (raw_twitter_username)))
)))

(# Validate the property length)
(func render_validation_errors ((list
	(if (!(is_nil first_name)) (func validate_first_name_length (first_name)))
	(if (!(is_nil last_name)) (func validate_last_name_length (last_name)))
)))

(# Try to get the facebook username)
(if (!(is_nil raw_facebook_username)) (
	(var facebook_username (func get_facebook_username (raw_facebook_username)))
))

(# Try to get the instagram username)
(if (!(is_nil raw_instagram_username)) (
	(var instagram_username (func get_instagram_username (raw_instagram_username)))
))

(# Try to get the twitter username)
(if (!(is_nil raw_twitter_username)) (
	(var twitter_username (func get_twitter_username (raw_twitter_username)))
))

(# Show errors for invalid usernames)
(func render_validation_errors ((list
	(if (!(is_nil website_url)) (func validate_website_url_validity (website_url)))
	(if ((!(is_nil raw_facebook_username)) and (is_nil facebook_username)) (hash (error (get_error 2501)) (status 400)))
	(if ((!(is_nil raw_instagram_username)) and (is_nil instagram_username)) (hash (error (get_error 2502)) (status 400)))
	(if ((!(is_nil raw_twitter_username)) and (is_nil twitter_username)) (hash (error (get_error 2503)) (status 400)))
)))

(# Set the values)
(if (!(is_nil first_name)) (var author.properties.first_name first_name))
(if (!(is_nil last_name)) (var author.properties.last_name last_name))
(if (!(is_nil website_url)) (var author.properties.website_url (if (website_url.length == 0) nil else website_url)))
(if (!(is_nil facebook_username)) (var author.properties.facebook_username (if (facebook_username.length == 0) nil else facebook_username)))
(if (!(is_nil instagram_username)) (var author.properties.instagram_username (if (instagram_username.length == 0) nil else instagram_username)))
(if (!(is_nil twitter_username)) (var author.properties.twitter_username (if (twitter_username.length == 0) nil else twitter_username)))

(if (
	(fields.contains "profile_image")
	or (fields.contains "profile_image.blurhash")
) (
	(# Get the profile image item)
	(var profile_image_item (func get_table_object (author.properties.profile_image_item (get_env "AUTHOR_PROFILE_IMAGE_ITEM_TABLE_ID"))))

	(# Get the profile image)
	(var profile_image (func get_table_object (profile_image_item.properties.profile_image (get_env "AUTHOR_PROFILE_IMAGE_TABLE_ID"))))
))

(# Render the result)
(var result (hash))

(if (fields.contains "uuid") (var result.uuid author.uuid))
(if (fields.contains "first_name") (var result.first_name author.properties.first_name))
(if (fields.contains "last_name") (var result.last_name author.properties.last_name))
(if (
	(fields.contains "bio")
	or (fields.contains "bio.value")
	or (fields.contains "bio.language")
) (
	(var result.bio (
		(func find_author_bio_by_languages (
			author.properties.bios
			language_list
			((fields.contains "bio") or (fields.contains "bio.value"))
			((fields.contains "bio") or (fields.contains "bio.language"))
		))
	))
))
(if (fields.contains "website_url") (var result.website_url author.properties.website_url))
(if (fields.contains "facebook_username") (var result.facebook_username author.properties.facebook_username))
(if (fields.contains "instagram_username") (var result.instagram_username author.properties.instagram_username))
(if (fields.contains "twitter_username") (var result.twitter_username author.properties.twitter_username))
(if (
	(fields.contains "profile_image")
	or (fields.contains "profile_image.blurhash")
) (
	(if ((is_nil profile_image) or (is_nil profile_image_item)) (
		(var result.profile_image nil)
	) else (
		(var profile_image_hash (hash))

		(if ((fields.contains "profile_image") or (fields.contains "profile_image.url")) (var profile_image_hash.url (TableObject.get_cdn_url profile_image_item.properties.profile_image (hash (etag profile_image.properties.etag)))))
		(if ((fields.contains "profile_image") or (fields.contains "profile_image.blurhash")) (var profile_image_hash.blurhash profile_image_item.properties.blurhash))

		(var result.profile_image profile_image_hash)
	))
))

(render_json result 200)