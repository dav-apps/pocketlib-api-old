(# Get the params)
(var uuid (get_param uuid))

(# Get the access token)
(var access_token (get_header "Authorization"))
(func render_validation_errors ((list
	(func validate_auth_header_presence (access_token))
)))

(# Make sure content type is json)
(func render_validation_errors ((list
	(func validate_content_type_json ((get_header "Content-Type")))
)))

(var json (parse_json (get_body)))

(var first_name json.first_name)
(var last_name json.last_name)
(var website_url json.website_url)
(var raw_facebook_username json.facebook_username)
(var raw_instagram_username json.instagram_username)
(var raw_twitter_username json.twitter_username)

(# Get the session)
(var session (func get_session (access_token)))

(# Check if the user is an admin)
(var admins (get_env "ADMINS"))
(var is_admin (admins.contains session.user_id))

(if (! is_admin) (
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Get the author)
(var author (func get_table_object (uuid (get_env "AUTHOR_TABLE_ID"))))

(if (is_nil author) (
	(func render_validation_errors ((list (hash (error (get_error 3503)) (status 404)))))
))

(# Check if the author belongs to the user)
(if (session.user_id != author.user_id) (
	(# Action not allowed)
	(func render_validation_errors ((list (hash (error (get_error 1002)) (status 403)))))
))

(# Validate the property types)
(func render_validation_errors ((list
	(if (!(is_nil first_name)) (func validate_first_name_type (first_name)))
	(if (!(is_nil last_name)) (func validate_last_name_type (last_name)))
	(if (!(is_nil website_url)) (func validate_website_url_type (website_url)))
	(if (!(is_nil raw_facebook_username)) (func validate_facebook_username_type (raw_facebook_username)))
	(if (!(is_nil raw_instagram_username)) (func validate_instagram_username_type (raw_instagram_username)))
	(if (!(is_nil raw_twitter_username)) (func validate_twitter_username_type (raw_twitter_username)))
)))

(# Validate the property length)
(func render_validation_errors ((list
	(if (!(is_nil first_name)) (func validate_first_name_length (first_name)))
	(if (!(is_nil last_name)) (func validate_last_name_length (last_name)))
)))

(# Try to get the facebook username)
(if (!(is_nil raw_facebook_username)) (
	(var facebook_username (func get_facebook_username (raw_facebook_username)))
))

(# Try to get the instagram username)
(if (!(is_nil raw_instagram_username)) (
	(var instagram_username (func get_instagram_username (raw_instagram_username)))
))

(# Try to get the twitter username)
(if (!(is_nil raw_twitter_username)) (
	(var twitter_username (func get_twitter_username (raw_twitter_username)))
))

(# Show errors for invalid usernames)
(func render_validation_errors ((list
	(if (!(is_nil website_url)) (func validate_website_url_validity (website_url)))
	(if ((!(is_nil raw_facebook_username)) and (is_nil facebook_username)) (hash (error (get_error 2501)) (status 400)))
	(if ((!(is_nil raw_instagram_username)) and (is_nil instagram_username)) (hash (error (get_error 2502)) (status 400)))
	(if ((!(is_nil raw_twitter_username)) and (is_nil twitter_username)) (hash (error (get_error 2503)) (status 400)))
)))

(# Set the values)
(if (!(is_nil first_name)) (var author.properties.first_name first_name))
(if (!(is_nil last_name)) (var author.properties.last_name last_name))
(if (!(is_nil website_url)) (var author.properties.website_url (if (website_url.length == 0) nil else website_url)))
(if (!(is_nil facebook_username)) (var author.properties.facebook_username (if (facebook_username.length == 0) nil else facebook_username)))
(if (!(is_nil instagram_username)) (var author.properties.instagram_username (if (instagram_username.length == 0) nil else instagram_username)))
(if (!(is_nil twitter_username)) (var author.properties.twitter_username (if (twitter_username.length == 0) nil else twitter_username)))

(# Get the bios)
(var bios (func get_author_bios_by_string (author.properties.bios false)))

(# Get the collections)
(var collections (func get_collections_by_string (author.properties.collections)))

(# Render the result)
(render_json (hash
	(uuid author.uuid)
	(first_name author.properties.first_name)
	(last_name author.properties.last_name)
	(website_url author.properties.website_url)
	(facebook_username author.properties.facebook_username)
	(instagram_username author.properties.instagram_username)
	(twitter_username author.properties.twitter_username)
	(bios bios)
	(collections collections)
	(profile_image (!(is_nil author.properties.profile_image)))
	(profile_image_blurhash author.properties.profile_image_blurhash)
) 200)